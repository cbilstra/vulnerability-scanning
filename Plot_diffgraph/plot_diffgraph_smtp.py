from collections import Counter

from matplotlib.pyplot import gca

from Plot_versions.plot_versions_smtp import extract_smtp_counts, sendmail_dates, exim_dates
from matplotlib import pyplot as plt

import numpy as np


class VersionDistribution:

    def __init__(self, normalized_distribution: Counter):
        self._distribution: Counter = normalized_distribution

    @classmethod
    def from_counts(cls, counter: Counter) -> 'VersionDistribution':
        new_counter = counter.copy()
        total = sum(new_counter.values())

        for key in new_counter:
            new_counter[key] = new_counter[key] / total

        return cls(new_counter)

    def sum_of_positives(self) -> float:
        total = 0

        for value in self._distribution.values():
            if value > 0:
                total += value

        return total

    def __sub__(self, other: 'VersionDistribution') -> 'VersionDistribution':
        new_distribution = self._distribution.copy()
        new_distribution.subtract(other._distribution)

        return VersionDistribution(new_distribution)

    def __str__(self):
        return self._distribution.__str__()


sendmail_12, exim_12 = extract_smtp_counts('201205')
sendmail_13, exim_13 = extract_smtp_counts('201303')

sendmail_12 = VersionDistribution.from_counts(sendmail_12)
sendmail_13 = VersionDistribution.from_counts(sendmail_13)
exim_12 = VersionDistribution.from_counts(exim_12)
exim_13 = VersionDistribution.from_counts(exim_13)


def plot_diffgraph(first: VersionDistribution, later: VersionDistribution, dates: dict):
    diff = later - first

    x = np.arange(len(dates))
    data = [first._distribution[key] if key in first._distribution else 0 for key in dates]
    pos = [diff._distribution[key] if key in diff._distribution and diff._distribution[key] > 0 else 0 for key in dates]
    neg = [diff._distribution[key] if key in diff._distribution and diff._distribution[key] < 0 else 0 for key in dates]

    plt.bar(x, data, color='darkgrey')
    plt.bar(x, pos, color='tab:green', bottom=data)
    plt.bar(x, neg, color='tab:red', bottom=np.array(data))

    plt.xticks(x, dates.keys(), rotation='vertical', color='gray')
    gca().set_yticklabels(['{:.0f}%'.format(x * 100) for x in gca().get_yticks()])


plot_diffgraph(sendmail_12, sendmail_13, sendmail_dates)
plt.savefig("sendmail_diffgraph.pdf")
plt.show()

plot_diffgraph(exim_12, exim_13, exim_dates)
plt.savefig("exim_diffgraph.pdf")
plt.show()
