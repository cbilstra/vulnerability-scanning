import re
import datetime
from DMDP import calculate


search_banner = "Lotus Notes"

# CVE-2012-2174 vuln score 9.3 https://www.cvedetails.com/cve/CVE-2012-2174/
patch_date_2174 = datetime.datetime.strptime("2012-06-20", '%Y-%m-%d')

# CVE-2012-4846 vuln score 9.3 https://www.cvedetails.com/cve/CVE-2012-4846/
patch_date_4846 = datetime.datetime.strptime("2012-12-19", '%Y-%m-%d')

# CVE-2012-4823 vuln score 9.3 https://www.cvedetails.com/cve/CVE-2012-4823/
patch_date_4823 = datetime.datetime.strptime("2013-01-10", '%Y-%m-%d')

def process_version(version: str):
    parts = version.split('.')
    sp = None
    if 'FP' in parts[2]:
        sp = int(parts[2].split('FP')[1])
        parts[2] = parts[2].split('FP')[0]

    parts = [int(x) for x in parts]

    return parts, sp

def mdp_4823():
    calculate(patch_date_4823, get_version_number, is_vulnerable_4823, search_banner, pop3=True)

def is_vulnerable_4823(version: str):
    parts, sp = process_version(version)
    
    if parts[0] == 8:
        if parts[1] <= 5:
                if parts[2] < 3 or (parts[2] == 4 and sp is None):
                    return True
                elif parts[2] == 3 and (sp is None or sp <= 2):
                    return True

    return False

def mdp_4846():
    calculate(patch_date_4846, get_version_number, is_vulnerable_4846, search_banner, pop3=True)

def is_vulnerable_4846(version: str):
    parts, sp = process_version(version)
    
    if parts[0] == 8:
        if parts[1] <= 5:
                if parts[2] < 3:
                    return True
                elif parts[2] == 3 and (sp is None or sp <= 2):
                    return True

    return False

def mdp_2174():
    calculate(patch_date_2174, get_version_number, is_vulnerable_2174, search_banner, pop3=True)

def is_vulnerable_2174(version: str):
    parts, sp = process_version(version)
    
    if parts[0] == 8:
        if parts[1] <= 5:
                if parts[2] < 3:
                    return True
                elif parts[2] == 3 and (sp is None or sp < 2):
                    return True

    return False


lotus_re = re.compile(r'\+OK Lotus Notes[\w ]*(?P<version>\d\.\d\.\d(FP\d)?)')
def get_version_number(input_banner: str):
    matches = lotus_re.search(input_banner)
    if matches is not None:
        return matches.group('version')
    return None


if __name__ == '__main__':
    mdp_2750()
