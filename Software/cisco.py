import csv
import re
import datetime
from typing import Optional

from DMDP import calculate
from MSR import msr

search_banner = ""

# CVE-2012-4623 vulnerability score 7.8 https://www.cvedetails.com/cve-details.php?t=1&cve_id=CVE-2012-4623, patch is available since 18-07-2012: https://downloads.mysql.com/archives/community/
patch_date_4623 = datetime.datetime.strptime("2012-09-26", '%Y-%m-%d')

patch_date_1350 = datetime.datetime.strptime("2012-08-06", '%Y-%m-%d')

patch_date_4012 = datetime.datetime.strptime("2012-05-02", '%Y-%m-%d')


# TODO 3197 and 3177 have same report date.
# CVE-2012-3177 vulnerability score 6.8 https://www.cvedetails.com/cve/CVE-2012-3177/ , patch is available since 29-08-2012 and 11-09-2012 (for the respective vulnerable versions)
# patch_date_3177 = datetime.datetime.strptime("2012-10-16", '%Y-%m-%d')

# CVE-2012-2750 vulnerability score 10.0 https://www.cvedetails.com/cve/CVE-2012-2750/ , patch is available since 19-04-2012
# patch_date_2750 = datetime.datetime.strptime("2012-08-16", '%Y-%m-%d')


def get_version_number(input_banner: str):
    if 'Cisco' not in input_banner:
        return None

    matches = re.findall("Version [0-9]+\.[0-9A-Za-z\(\)]*", input_banner)
    if len(matches) > 0:
        return matches[0][8:]
    return None


def get_minor(version: str) -> Optional[str]:
    splitted = version.split(".")
    if len(splitted) < 2:
        return None  # cannot determine

    return splitted[1]


def mdp_4623():
    calculate(patch_date_4623, get_version_number, is_vulnerable_4623, search_banner, cisco=True)


def is_vulnerable_4623(version: str):
    minor = get_minor(version)
    if minor is None:
        return None

    return version[:2] == '12' and 2 <= int(minor[0]) <= 4 or \
           version[:2] == '15' and 0 <= int(minor[0]) <= 2


def mdp_1350():
    calculate(patch_date_1350, get_version_number, is_vulnerable_1350, search_banner, cisco=True)


def is_vulnerable_1350(version: str):
    minor = get_minor(version)
    if minor is None:
        return None

    return version[:2] == '12' and 3 <= int(minor[0]) <= 4


def mdp_4012():
    calculate(patch_date_4012, get_version_number, is_vulnerable_4012, search_banner, cisco=True)


def is_vulnerable_4012(version: str):
    minor = get_minor(version)
    if minor is None:
        return None

    return version[:2] == '12' and int(minor[0]) == 0 or version[:2] == '15' and 0 <= int(minor[0]) <= 1


def get_eol_versions(filename: str) -> dict:
    eol_versions = dict()

    with open(filename) as csv_file:
        reader = csv.reader(csv_file, delimiter=",")
        for i, (version, _, date_string) in enumerate(reader):
            if i > 0:
                try:
                    date = datetime.datetime.strptime(date_string, '%d/%m/%Y').date()
                    eol_versions.update({version: date})
                    # end_of_dataset = datetime.date(2013, 5, 30)
                    # if d < end_of_dataset:
                    #     print(version, d)
                except ValueError:
                    print(f"could not parse {version}, {date_string}")
    
    return eol_versions


eol_versions = get_eol_versions("cisco_version_eol.csv")


def version_maintained(version, date):
    if version in eol_versions:
        return eol_versions[version] >= date
    return False


if __name__ == '__main__':
    msr(version_maintained=version_maintained, get_version_number=get_version_number, search_banner=search_banner, cisco=True)
