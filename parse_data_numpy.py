import datetime
import glob
import json
import time

import numpy as np
import re

filename_search = re.compile(r'\/(?P<filename>[\w]+)\.json')

def transform_datetime(input_datetime):
    return datetime.datetime.utcfromtimestamp(input_datetime / 1000).strftime('%Y-%m-%d %H:%M:%S')


def process_data(filepath: str, ssh=False, mysql=False, smtp=False, pop3=False):
    start_time = time.monotonic()

    print(f"Extracting {filepath}")
    with open(filepath, mode='r') as file:
        column_types = [('hash', 'U32'), ('ip', 'U15'), ('banner', 'object'), ('country', object), ('city', object),
                        ('region', object), ('latitude', object), ('longitude', object), ('datetime', 'U20')]
        entries = []
        try:
            while line := next(file):
                entry = json.loads(line)

                # Skip if this is not telnet over TCP
                if ssh:
                    if entry['name'] != 'ssh' or entry['proto'] != 'tcp':
                        continue
                if mysql:
                    if entry['name'] != 'mysql' or entry['proto'] != 'tcp':
                        continue
                if smtp:
                    if entry['name'] != 'smtp' or entry['proto'] != 'tcp':
                        continue
                if pop3:
                    if entry['name'] != 'pop3' or entry['proto'] != 'tcp':
                        continue

                # Leave out geo information if it is not present and continue
                if entry['geo'] is None:
                    entries.append((entry['_id']['h'],                          # hash
                                    entry['ip'],                                # ip
                                    entry['banner'],                            # banner
                                    None,                                       # country
                                    None,                                       # city
                                    None,                                       # region
                                    None,                                       # latitude
                                    None,                                       # longitude
                                    transform_datetime(entry['t']['$date'])     # datetime
                                    ))
                    continue

                # Extract latitude and longitude if available
                latitude, longitude = None, None
                if 'loc' in entry['geo']:
                    latitude, longitude = entry['geo']['loc']

                # Append this entry
                entries.append((entry['_id']['h'],                          # hash
                                entry['ip'],                                # ip
                                entry['banner'],                            # banner
                                entry['geo'].get('c'),                      # country
                                entry['geo'].get('city'),                   # city_3158
                                None,
                                latitude,                                   # latitude
                                longitude,                                  # longitude
                                transform_datetime(entry['t']['$date'])     # datetime
                                ))
        except StopIteration:
            pass

    matches = filename_search.search(filepath)
    filename = matches.group('filename')

    print(f"Saving the entries to processed_data/{filename}.npz")
    entries = np.array(entries, dtype=column_types)
    np.savez_compressed(f'processed_data/{filename}.npz', entries)

    print(f"Took {time.monotonic() - start_time}s in total")


files = list(glob.iglob('raw_data/*.json'))
files.sort()


def process_mysql():
    for filepath in files:
        if "_3306" not in filepath:
            continue
        process_data(filepath, mysql=True)


def process_ssh():
    for filepath in files:
        if "_22" not in filepath:
            continue
        process_data(filepath, ssh=True)
        
def process_smtp():
    for filepath in files:
        if "_25" not in filepath:
            continue
        process_data(filepath, smtp=True) 

def process_pop3():
    for filepath in files:
        if "_110" not in filepath:
            continue
        process_data(filepath, pop3=True) 

if __name__ == '__main__':
    process_smtp()
    print("Processing finished")
