import datetime
import json
import time

import numpy as np


def transform_datetime(input_datetime):
    return datetime.datetime.utcfromtimestamp(input_datetime / 1000).strftime('%Y-%m-%d %H:%M:%S')


start_time = time.monotonic()

print("Extracting the entries")
with open('critical_201205_23.json', mode='r') as file:
    columns = ['hash', 'ip', 'banner', 'country', 'city', 'region', 'latitude', 'longitude', 'datetime']
    entries = []
    try:
        while line := next(file):
            entry = json.loads(line)

            # Skip if this is not telnet over TCP
            if entry['name'] != 'telnet' or entry['proto'] != 'tcp':
                continue

            # Leave out geo information if it is not present and continue
            if entry['geo'] is None:
                entries.append([entry['_id']['h'],                          # hash
                                entry['ip'],                                # ip
                                entry['banner'],                            # banner
                                None,                                       # country
                                None,                                       # city
                                None,                                       # region
                                None,                                       # latitude
                                None,                                       # longitude
                                transform_datetime(entry['t']['$date'])     # datetime
                                ])
                continue

            # Extract latitude and longitude if available
            latitude, longitude = None, None
            if 'loc' in entry['geo']:
                latitude, longitude = entry['geo']['loc']

            # Append this entry
            entries.append([entry['_id']['h'],                          # hash
                            entry['ip'],                                # ip
                            entry['banner'],                            # banner
                            entry['geo'].get('c'),                      # country
                            entry['geo'].get('city'),                   # city
                            entry['geo'].get('reg'),                    # region
                            latitude,                                   # latitude
                            longitude,                                  # longitude
                            transform_datetime(entry['t']['$date'])     # datetime
                            ])
    except StopIteration:
        pass

print("Saving the entries to output.npz")
np.savez_compressed('output.npz', columns, entries)

print(f"Took {time.monotonic() - start_time}s in total")
