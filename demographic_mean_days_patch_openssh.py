import numpy as np
import datetime
import glob

patch_date = datetime.datetime.utcfromtimestamp(1327622400)
us_vulnerable_ips = {}

total = 0
count = 0

files = list(glob.iglob('processed_data/*.npz'))
files.sort()

for filepath in files:
    print(f"Processing {filepath}")
    entries = np.load(filepath, allow_pickle=True)['arr_0']

        
    def get_version_number(input_banner: str):
        openssh_tag = input_banner[input_banner.find('SSH-2.0-OpenSSH'):]
        split = input_banner.split("_")
        if len(split) > 1:
            check = split[1]
            if not check:
                return None
            else:
                try:
                    first_num = int(check[0])
                    if check[1] != '.':
                        return first_num
                        
                    second_num = int(check[2])
                except Exception as e:
                    return None

            return split[1][:3]
        
        return None


    def is_vulnerable(input_version) -> bool:
        if input_version:
            ver = float(input_version)
            if ver < 5.7:
                return True

        return False


    # Extract OpenSSH services and version
    openssh_scans = []
    for banner in entries['banner']:
        if 'SSH-2.0-OpenSSH' in banner:
            openssh_scans.append((version := get_version_number(banner), is_vulnerable(version)))
        else:
            openssh_scans.append(None)

    print(f"Loaded {len(entries)} scan results of which "
          f"{len([s for s in openssh_scans if s is not None])} were OpenSSH services.")

    #count = 0
    #len_entries = len(entries)
    for entry, openssh_scan in zip(entries, openssh_scans):
        if openssh_scan is None or entry['country'] is None:
            continue

        #count += 1
        #print("{}/{}".format(count, len_entries))
        country = entry['country']
        ip = entry['ip']
        _, vulnerable = openssh_scan
        
        if country == 'USA':
            if not vulnerable and ip in us_vulnerable_ips:
                #old_date = us_vulnerable_ips[ip]
                new_date = entry['datetime']
                
                patch_time = datetime.datetime.strptime(new_date, '%Y-%m-%d %H:%M:%S') - patch_date
                total += patch_time.total_seconds()
                count += 1
                
                del us_vulnerable_ips[ip]
                
            elif vulnerable:
                if ip not in us_vulnerable_ips:
                    us_vulnerable_ips[ip] = entry['datetime']
    
    del entries
    
print(f"Average US patch time (in seconds): {total/count}, (in days): {total/count/60./60./24.}, patched ips: {count}")


