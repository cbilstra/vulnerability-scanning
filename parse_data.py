import pandas as pd
import time
import datetime
from io import StringIO

DATA_PATH = "critical_201303_23.json"
NUM_LINES = 1000

def transform_date(date):
    epoch = date['$date']
    return datetime.datetime.utcfromtimestamp(epoch/1000).strftime('%Y-%m-%d %H:%M:%S')
    
def transform_id_to_hash(old_id):
    return old_id['h']
    
def get_geo(geo, key):
    if not geo:
        return None
    
    if key in geo:
        return geo[key]
    else:
        return None

def parse():
    t0 = time.time()

    with open(DATA_PATH) as file:
        entries = [next(file) for _ in range(NUM_LINES)]

    sample = StringIO("".join(entries))

    df = pd.read_json(sample, orient="columns", lines=True, encoding="utf_8")
    
    df['t'] = df.apply (lambda row: transform_date(row['t']), axis=1)
    df['_id'] = df.apply (lambda row: transform_id_to_hash(row['_id']), axis=1)
    df['country'] = df.apply (lambda row: get_geo(row['geo'], 'c'), axis=1)
    df['city'] = df.apply (lambda row: get_geo(row['geo'], 'city'), axis=1)
    df['region'] = df.apply (lambda row: get_geo(row['geo'], 'reg'), axis=1)
    df['coordinates'] = df.apply (lambda row: get_geo(row['geo'], 'loc'), axis=1)
    
    del df['geo']
    
    print(df['ip'])
    print(f"It took {time.time()-t0:.3f} seconds to parse the data.")
    print(df.columns)
    
    df.to_pickle("data.pkl")


if __name__ == '__main__':
    parse()
