from datetime import timezone, datetime, date
import glob
import json

import os
import numpy as np
import re
from matplotlib import pyplot as plt
from matplotlib.dates import date2num
import pickle

def transform_datetime(input_datetime):
    return datetime.fromtimestamp(input_datetime / 1000, tz=timezone.utc).date()

def process_data(filepath: str, date_dict: dict):
    if os.name == 'nt':
        filename_search = re.compile(r'\\(?P<filename>[\w]+)\.json')
    else:
        filename_search = re.compile(r'/(?P<filename>[\w]+)\.json')

    print(f"Extracting {filepath}")
    with open(filepath, mode='r') as file:
        try:
            while line := next(file):
                entry = json.loads(line)
                entry_date = transform_datetime(entry['t']['$date'])

                if entry_date not in date_dict:
                    date_dict[entry_date] = 0

                date_dict[entry_date] += 1


        except StopIteration:
            pass

def plot_date_dict(date_dict):
    print("Plotting data...")
    sorted_lists = sorted(date_dict.items())
    x, y = zip(*sorted_lists)

    fig = plt.figure()
    ax1 = fig.subplots(1,1)
    ax1.grid(axis="y")
    ax1.plot_date(x, y, tz=timezone.utc, linestyle="-", marker=".")
    ax1.set_xlabel("Entry date")
    ax1.set_ylabel("Number of entries")
    ax1.set_ylim(0)
    ax1.set_xlim(date(2012,5,15))

    fig.autofmt_xdate()

    fig.savefig("plots/scan_intervals.pdf", bbox_inches='tight')


if __name__ == "__main__":
    files = list(glob.iglob('raw_data/*.json'))
    files.sort()

    date_dict = {}
    for filepath in files:
        process_data(filepath, date_dict)

    filename = "processed_data/date_dict.pi"
    with open(filename, mode="wb") as f:
        pickle.dump(date_dict, f)

    # with open(filename, mode="rb") as f:
    #     date_dict = pickle.load(f)

    plot_date_dict(date_dict)
    #print(date_dict)