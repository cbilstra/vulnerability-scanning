from collections import Counter
from typing import Dict

from Plot_versions.plot_versions_cisco import extract_cisco_version_distribution


class VersionDistribution:

    def __init__(self, normalized_distribution: Counter):
        self._distribution: Counter = normalized_distribution

    @classmethod
    def from_counts(cls, counter: Counter) -> 'VersionDistribution':
        new_counter = counter.copy()
        total = sum(new_counter.values())

        for key in new_counter:
            new_counter[key] = new_counter[key] / total

        return cls(new_counter)

    def sum_of_positives(self) -> float:
        total = 0

        for value in self._distribution.values():
            if value > 0:
                total += value

        return total

    def __sub__(self, other: 'VersionDistribution') -> 'VersionDistribution':
        new_distribution = self._distribution.copy()
        new_distribution.subtract(other._distribution)

        return VersionDistribution(new_distribution)

    def __str__(self):
        return self._distribution.__str__()


may = VersionDistribution.from_counts(extract_cisco_version_distribution('201205'))
june = VersionDistribution.from_counts(extract_cisco_version_distribution('201206'))
july = VersionDistribution.from_counts(extract_cisco_version_distribution('201207'))

print(may)
print(june)
print(june - may)

print((june - may).sum_of_positives())
print((july - june).sum_of_positives())
