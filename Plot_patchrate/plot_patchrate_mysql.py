from collections import Counter
from matplotlib import pyplot as plt
from matplotlib.pyplot import gca

from Plot_versions.plot_versions_mysql import extract_mysql_counts


class VersionDistribution:

    def __init__(self, normalized_distribution: Counter):
        self._distribution: Counter = normalized_distribution

    @classmethod
    def from_counts(cls, counter: Counter) -> 'VersionDistribution':
        new_counter = counter.copy()
        total = sum(new_counter.values())

        for key in new_counter:
            new_counter[key] = new_counter[key] / total

        return cls(new_counter)

    def sum_of_positives(self) -> float:
        total = 0

        for value in self._distribution.values():
            if value > 0:
                total += value

        return total

    def __sub__(self, other: 'VersionDistribution') -> 'VersionDistribution':
        new_distribution = self._distribution.copy()
        new_distribution.subtract(other._distribution)

        return VersionDistribution(new_distribution)

    def __str__(self):
        return self._distribution.__str__()


patch_rates = []
other_months = ['201206', '201207', '201208', '201209', '201210', '201211', '201212', '201301', '201302', '201303']

previous = VersionDistribution.from_counts(extract_mysql_counts('201205'))
for month in other_months:
    current = VersionDistribution.from_counts(extract_mysql_counts(month))

    difference = current - previous
    patch_rates.append(difference.sum_of_positives())

    previous = current

print(patch_rates)

plt.plot(other_months, patch_rates)
plt.ylim((0, 1))
gca().set_yticklabels(['{:.0f}%'.format(x*100) for x in gca().get_yticks()])
plt.show()
